"use strict";(self.webpackChunkhook_fetch_docs=self.webpackChunkhook_fetch_docs||[]).push([[8099],{5884:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/chat-application","title":"\u804a\u5929\u5e94\u7528\u793a\u4f8b","description":"\u672c\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Hook-Fetch \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u6d41\u5f0f\u804a\u5929\u5e94\u7528\uff0c\u652f\u6301\u5b9e\u65f6\u6d88\u606f\u4f20\u8f93\u548c AI \u5bf9\u8bdd\u3002","source":"@site/docs/examples/chat-application.md","sourceDirName":"examples","slug":"/examples/chat-application","permalink":"/hook-fetch/docs/examples/chat-application","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Json_Lee","lastUpdatedAt":1751963620000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\u6700\u4f73\u5b9e\u8df5","permalink":"/hook-fetch/docs/best-practices"},"next":{"title":"\u5e38\u89c1\u95ee\u9898","permalink":"/hook-fetch/docs/reference/faq"}}');var a=s(4848),r=s(8453);const o={sidebar_position:1},i="\u804a\u5929\u5e94\u7528\u793a\u4f8b",c={},l=[{value:"\u5b8c\u6574\u793a\u4f8b",id:"\u5b8c\u6574\u793a\u4f8b",level:2},{value:"1. API \u914d\u7f6e",id:"1-api-\u914d\u7f6e",level:3},{value:"2. \u6d88\u606f\u7c7b\u578b\u5b9a\u4e49",id:"2-\u6d88\u606f\u7c7b\u578b\u5b9a\u4e49",level:3},{value:"3. React \u804a\u5929\u7ec4\u4ef6",id:"3-react-\u804a\u5929\u7ec4\u4ef6",level:3},{value:"4. \u6837\u5f0f\u6587\u4ef6",id:"4-\u6837\u5f0f\u6587\u4ef6",level:3},{value:"5. Vue \u7248\u672c",id:"5-vue-\u7248\u672c",level:3},{value:"6. \u9ad8\u7ea7\u529f\u80fd",id:"6-\u9ad8\u7ea7\u529f\u80fd",level:3},{value:"\u6d88\u606f\u6301\u4e45\u5316",id:"\u6d88\u606f\u6301\u4e45\u5316",level:4},{value:"\u6d88\u606f\u641c\u7d22",id:"\u6d88\u606f\u641c\u7d22",level:4}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\u804a\u5929\u5e94\u7528\u793a\u4f8b",children:"\u804a\u5929\u5e94\u7528\u793a\u4f8b"})}),"\n",(0,a.jsx)(n.p,{children:"\u672c\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Hook-Fetch \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u6d41\u5f0f\u804a\u5929\u5e94\u7528\uff0c\u652f\u6301\u5b9e\u65f6\u6d88\u606f\u4f20\u8f93\u548c AI \u5bf9\u8bdd\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"\u5b8c\u6574\u793a\u4f8b",children:"\u5b8c\u6574\u793a\u4f8b"}),"\n",(0,a.jsx)(n.h3,{id:"1-api-\u914d\u7f6e",children:"1. API \u914d\u7f6e"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/api/chat.ts\nimport hookFetch from 'hook-fetch';\nimport { sseTextDecoderPlugin } from 'hook-fetch/plugins/sse';\n\nexport const chatApi = hookFetch.create({\n  baseURL: 'https://api.openai.com/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: 'data: ',\n      doneSymbol: '[DONE]'\n    })\n  ]\n});\n\n// \u8bbe\u7f6e\u8ba4\u8bc1\nexport const setChatApiKey = (apiKey: string) => {\n  chatApi.use({\n    name: 'auth',\n    priority: 1,\n    async beforeRequest(config) {\n      config.headers = new Headers(config.headers);\n      config.headers.set('Authorization', `Bearer ${apiKey}`);\n      return config;\n    }\n  });\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-\u6d88\u606f\u7c7b\u578b\u5b9a\u4e49",children:"2. \u6d88\u606f\u7c7b\u578b\u5b9a\u4e49"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/types/chat.ts\nexport interface Message {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: number;\n  streaming?: boolean;\n}\n\nexport interface ChatConfig {\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  stream: boolean;\n}\n\nexport interface ChatRequest {\n  model: string;\n  messages: Array<{\n    role: string;\n    content: string;\n  }>;\n  temperature?: number;\n  max_tokens?: number;\n  stream?: boolean;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-react-\u804a\u5929\u7ec4\u4ef6",children:"3. React \u804a\u5929\u7ec4\u4ef6"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/components/ChatApp.tsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useHookFetch } from 'hook-fetch/react';\nimport { chatApi } from '../api/chat';\nimport { Message, ChatConfig } from '../types/chat';\nimport './ChatApp.css';\n\nconst DEFAULT_CONFIG: ChatConfig = {\n  model: 'gpt-3.5-turbo',\n  temperature: 0.7,\n  maxTokens: 1000,\n  stream: true\n};\n\nexport function ChatApp() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [config, setConfig] = useState<ChatConfig>(DEFAULT_CONFIG);\n  const [streamingMessage, setStreamingMessage] = useState<Message | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { stream, loading, cancel } = useHookFetch({\n    request: (messages: Message[], config: ChatConfig) =>\n      chatApi.post('/chat/completions', {\n        model: config.model,\n        messages: messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })),\n        temperature: config.temperature,\n        max_tokens: config.maxTokens,\n        stream: config.stream\n      }),\n    onError: (error) => {\n      console.error('Chat error:', error);\n      setStreamingMessage(null);\n      addMessage({\n        id: Date.now().toString(),\n        role: 'system',\n        content: '\u62b1\u6b49\uff0c\u53d1\u751f\u4e86\u9519\u8bef\u3002\u8bf7\u7a0d\u540e\u91cd\u8bd5\u3002',\n        timestamp: Date.now()\n      });\n    }\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, streamingMessage]);\n\n  const addMessage = (message: Message) => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim() || loading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input.trim(),\n      timestamp: Date.now()\n    };\n\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    setInput('');\n\n    // \u521b\u5efa\u6d41\u5f0f\u6d88\u606f\n    const assistantMessage: Message = {\n      id: (Date.now() + 1).toString(),\n      role: 'assistant',\n      content: '',\n      timestamp: Date.now(),\n      streaming: true\n    };\n    setStreamingMessage(assistantMessage);\n\n    try {\n      for await (const chunk of stream(newMessages, config)) {\n        const delta = chunk.result?.choices?.[0]?.delta?.content;\n        if (delta) {\n          setStreamingMessage(prev => prev ? {\n            ...prev,\n            content: prev.content + delta\n          } : null);\n        }\n      }\n\n      // \u6d41\u5f0f\u5b8c\u6210\uff0c\u6dfb\u52a0\u5230\u6d88\u606f\u5217\u8868\n      if (streamingMessage) {\n        addMessage({\n          ...streamingMessage,\n          streaming: false\n        });\n      }\n    } catch (error) {\n      console.error('Streaming error:', error);\n    } finally {\n      setStreamingMessage(null);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const clearChat = () => {\n    setMessages([]);\n    setStreamingMessage(null);\n  };\n\n  return (\n    <div className=\"chat-app\">\n      <div className=\"chat-header\">\n        <h1>AI \u804a\u5929\u52a9\u624b</h1>\n        <div className=\"chat-controls\">\n          <select\n            value={config.model}\n            onChange={(e) => setConfig(prev => ({ ...prev, model: e.target.value }))}\n          >\n            <option value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</option>\n            <option value=\"gpt-4\">GPT-4</option>\n          </select>\n          <button onClick={clearChat} disabled={loading}>\n            \u6e05\u7a7a\u5bf9\u8bdd\n          </button>\n        </div>\n      </div>\n\n      <div className=\"chat-messages\">\n        {messages.map((message) => (\n          <MessageBubble key={message.id} message={message} />\n        ))}\n        {streamingMessage && (\n          <MessageBubble message={streamingMessage} />\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"chat-input\">\n        <textarea\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"\u8f93\u5165\u60a8\u7684\u6d88\u606f...\"\n          disabled={loading}\n          rows={3}\n        />\n        <div className=\"input-actions\">\n          <button onClick={sendMessage} disabled={loading || !input.trim()}>\n            {loading ? '\u53d1\u9001\u4e2d...' : '\u53d1\u9001'}\n          </button>\n          {loading && (\n            <button onClick={cancel} className=\"cancel-btn\">\n              \u53d6\u6d88\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// \u6d88\u606f\u6c14\u6ce1\u7ec4\u4ef6\nfunction MessageBubble({ message }: { message: Message }) {\n  return (\n    <div className={`message ${message.role}`}>\n      <div className=\"message-header\">\n        <span className=\"role\">{getRoleLabel(message.role)}</span>\n        <span className=\"timestamp\">\n          {new Date(message.timestamp).toLocaleTimeString()}\n        </span>\n      </div>\n      <div className=\"message-content\">\n        {message.content}\n        {message.streaming && <span className=\"cursor\">|</span>}\n      </div>\n    </div>\n  );\n}\n\nfunction getRoleLabel(role: string): string {\n  switch (role) {\n    case 'user': return '\u7528\u6237';\n    case 'assistant': return 'AI';\n    case 'system': return '\u7cfb\u7edf';\n    default: return role;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-\u6837\u5f0f\u6587\u4ef6",children:"4. \u6837\u5f0f\u6587\u4ef6"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* src/components/ChatApp.css */\n.chat-app {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  max-width: 800px;\n  margin: 0 auto;\n  border: 1px solid #e1e5e9;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: #f8f9fa;\n  border-bottom: 1px solid #e1e5e9;\n}\n\n.chat-header h1 {\n  margin: 0;\n  font-size: 1.25rem;\n  color: #2c3e50;\n}\n\n.chat-controls {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n.chat-controls select {\n  padding: 0.25rem 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.chat-controls button {\n  padding: 0.25rem 0.75rem;\n  background: #dc3545;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.chat-controls button:hover {\n  background: #c82333;\n}\n\n.chat-controls button:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n  background: #ffffff;\n}\n\n.message {\n  margin-bottom: 1rem;\n  max-width: 70%;\n}\n\n.message.user {\n  margin-left: auto;\n}\n\n.message.assistant {\n  margin-right: auto;\n}\n\n.message.system {\n  margin: 0 auto;\n  max-width: 90%;\n  text-align: center;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.25rem;\n  font-size: 0.75rem;\n  color: #6c757d;\n}\n\n.role {\n  font-weight: 600;\n}\n\n.message-content {\n  padding: 0.75rem 1rem;\n  border-radius: 1rem;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n}\n\n.message.user .message-content {\n  background: #007bff;\n  color: white;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.message.assistant .message-content {\n  background: #f8f9fa;\n  color: #2c3e50;\n  border: 1px solid #e1e5e9;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.message.system .message-content {\n  background: #fff3cd;\n  color: #856404;\n  border: 1px solid #ffeaa7;\n  border-radius: 0.5rem;\n}\n\n.cursor {\n  animation: blink 1s infinite;\n  font-weight: bold;\n}\n\n@keyframes blink {\n  0%, 50% { opacity: 1; }\n  51%, 100% { opacity: 0; }\n}\n\n.chat-input {\n  padding: 1rem;\n  background: #f8f9fa;\n  border-top: 1px solid #e1e5e9;\n}\n\n.chat-input textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 0.5rem;\n  resize: vertical;\n  font-family: inherit;\n  font-size: 0.875rem;\n}\n\n.chat-input textarea:focus {\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n.input-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.input-actions button {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  font-weight: 500;\n}\n\n.input-actions button:first-child {\n  background: #007bff;\n  color: white;\n}\n\n.input-actions button:first-child:hover {\n  background: #0056b3;\n}\n\n.input-actions button:first-child:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n\n.cancel-btn {\n  background: #6c757d;\n  color: white;\n}\n\n.cancel-btn:hover {\n  background: #5a6268;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-vue-\u7248\u672c",children:"5. Vue \u7248\u672c"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-vue",children:'\x3c!-- src/components/ChatApp.vue --\x3e\n<template>\n  <div class="chat-app">\n    <div class="chat-header">\n      <h1>AI \u804a\u5929\u52a9\u624b</h1>\n      <div class="chat-controls">\n        <select v-model="config.model">\n          <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>\n          <option value="gpt-4">GPT-4</option>\n        </select>\n        <button @click="clearChat" :disabled="loading">\n          \u6e05\u7a7a\u5bf9\u8bdd\n        </button>\n      </div>\n    </div>\n\n    <div class="chat-messages" ref="messagesContainer">\n      <MessageBubble\n        v-for="message in messages"\n        :key="message.id"\n        :message="message"\n      />\n      <MessageBubble\n        v-if="streamingMessage"\n        :message="streamingMessage"\n      />\n    </div>\n\n    <div class="chat-input">\n      <textarea\n        v-model="input"\n        @keypress="handleKeyPress"\n        placeholder="\u8f93\u5165\u60a8\u7684\u6d88\u606f..."\n        :disabled="loading"\n        rows="3"\n      />\n      <div class="input-actions">\n        <button @click="sendMessage" :disabled="loading || !input.trim()">\n          {{ loading ? \'\u53d1\u9001\u4e2d...\' : \'\u53d1\u9001\' }}\n        </button>\n        <button v-if="loading" @click="cancel" class="cancel-btn">\n          \u53d6\u6d88\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive, nextTick, watch } from \'vue\';\nimport { useHookFetch } from \'hook-fetch/vue\';\nimport { chatApi } from \'../api/chat\';\nimport type { Message, ChatConfig } from \'../types/chat\';\n\nconst messages = ref<Message[]>([]);\nconst input = ref(\'\');\nconst streamingMessage = ref<Message | null>(null);\nconst messagesContainer = ref<HTMLElement>();\n\nconst config = reactive<ChatConfig>({\n  model: \'gpt-3.5-turbo\',\n  temperature: 0.7,\n  maxTokens: 1000,\n  stream: true\n});\n\nconst { stream, loading, cancel } = useHookFetch({\n  request: (messages: Message[], config: ChatConfig) =>\n    chatApi.post(\'/chat/completions\', {\n      model: config.model,\n      messages: messages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })),\n      temperature: config.temperature,\n      max_tokens: config.maxTokens,\n      stream: config.stream\n    }),\n  onError: (error) => {\n    console.error(\'Chat error:\', error);\n    streamingMessage.value = null;\n    addMessage({\n      id: Date.now().toString(),\n      role: \'system\',\n      content: \'\u62b1\u6b49\uff0c\u53d1\u751f\u4e86\u9519\u8bef\u3002\u8bf7\u7a0d\u540e\u91cd\u8bd5\u3002\',\n      timestamp: Date.now()\n    });\n  }\n});\n\nconst scrollToBottom = () => {\n  nextTick(() => {\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n    }\n  });\n};\n\nwatch([messages, streamingMessage], scrollToBottom, { deep: true });\n\nconst addMessage = (message: Message) => {\n  messages.value.push(message);\n};\n\nconst sendMessage = async () => {\n  if (!input.value.trim() || loading.value) return;\n\n  const userMessage: Message = {\n    id: Date.now().toString(),\n    role: \'user\',\n    content: input.value.trim(),\n    timestamp: Date.now()\n  };\n\n  const newMessages = [...messages.value, userMessage];\n  messages.value = newMessages;\n  input.value = \'\';\n\n  const assistantMessage: Message = {\n    id: (Date.now() + 1).toString(),\n    role: \'assistant\',\n    content: \'\',\n    timestamp: Date.now(),\n    streaming: true\n  };\n  streamingMessage.value = assistantMessage;\n\n  try {\n    for await (const chunk of stream(newMessages, config)) {\n      const delta = chunk.result?.choices?.[0]?.delta?.content;\n      if (delta && streamingMessage.value) {\n        streamingMessage.value.content += delta;\n      }\n    }\n\n    if (streamingMessage.value) {\n      addMessage({\n        ...streamingMessage.value,\n        streaming: false\n      });\n    }\n  } catch (error) {\n    console.error(\'Streaming error:\', error);\n  } finally {\n    streamingMessage.value = null;\n  }\n};\n\nconst handleKeyPress = (e: KeyboardEvent) => {\n  if (e.key === \'Enter\' && !e.shiftKey) {\n    e.preventDefault();\n    sendMessage();\n  }\n};\n\nconst clearChat = () => {\n  messages.value = [];\n  streamingMessage.value = null;\n};\n<\/script>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"6-\u9ad8\u7ea7\u529f\u80fd",children:"6. \u9ad8\u7ea7\u529f\u80fd"}),"\n",(0,a.jsx)(n.h4,{id:"\u6d88\u606f\u6301\u4e45\u5316",children:"\u6d88\u606f\u6301\u4e45\u5316"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useChatPersistence.ts\nimport { useEffect } from 'react';\nimport { Message } from '../types/chat';\n\nexport function useChatPersistence(\n  messages: Message[],\n  setMessages: (messages: Message[]) => void\n) {\n  const STORAGE_KEY = 'chat-messages';\n\n  // \u52a0\u8f7d\u6d88\u606f\n  useEffect(() => {\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (saved) {\n      try {\n        const parsedMessages = JSON.parse(saved);\n        setMessages(parsedMessages);\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      }\n    }\n  }, [setMessages]);\n\n  // \u4fdd\u5b58\u6d88\u606f\n  useEffect(() => {\n    if (messages.length > 0) {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(messages));\n    }\n  }, [messages]);\n\n  const clearStorage = () => {\n    localStorage.removeItem(STORAGE_KEY);\n  };\n\n  return { clearStorage };\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"\u6d88\u606f\u641c\u7d22",children:"\u6d88\u606f\u641c\u7d22"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useMessageSearch.ts\nimport { useMemo, useState } from 'react';\nimport { Message } from '../types/chat';\n\nexport function useMessageSearch(messages: Message[]) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredMessages = useMemo(() => {\n    if (!searchQuery.trim()) return messages;\n\n    return messages.filter(message =>\n      message.content.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [messages, searchQuery]);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    filteredMessages\n  };\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u8fd9\u4e2a\u5b8c\u6574\u7684\u804a\u5929\u5e94\u7528\u793a\u4f8b\u5c55\u793a\u4e86 Hook-Fetch \u5728\u5904\u7406\u6d41\u5f0f\u6570\u636e\u65b9\u9762\u7684\u5f3a\u5927\u80fd\u529b\uff0c\u5305\u62ec\u5b9e\u65f6\u6d88\u606f\u4f20\u8f93\u3001\u9519\u8bef\u5904\u7406\u3001\u72b6\u6001\u7ba1\u7406\u7b49\u5173\u952e\u529f\u80fd\u3002"})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);