"use strict";(self.webpackChunkhook_fetch_docs=self.webpackChunkhook_fetch_docs||[]).push([[4469],{2163:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"framework-integration","title":"\u6846\u67b6\u96c6\u6210","description":"Hook-Fetch \u4e3a\u4e3b\u6d41\u524d\u7aef\u6846\u67b6\u63d0\u4f9b\u4e86\u4e13\u95e8\u7684\u96c6\u6210\u652f\u6301\uff0c\u8ba9\u60a8\u80fd\u591f\u66f4\u597d\u5730\u5728 React\u3001Vue \u7b49\u6846\u67b6\u4e2d\u4f7f\u7528\u6d41\u5f0f\u6570\u636e\u5904\u7406\u548c\u8bf7\u6c42\u7ba1\u7406\u529f\u80fd\u3002","source":"@site/docs/framework-integration.md","sourceDirName":".","slug":"/framework-integration","permalink":"/hook-fetch/docs/framework-integration","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Json_Lee","lastUpdatedAt":1751963620000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"\u6d41\u5f0f\u5904\u7406","permalink":"/hook-fetch/docs/streaming"},"next":{"title":"\u6700\u4f73\u5b9e\u8df5","permalink":"/hook-fetch/docs/best-practices"}}');var t=r(4848),o=r(8453);const a={sidebar_position:6},i="\u6846\u67b6\u96c6\u6210",c={},l=[{value:"React \u96c6\u6210",id:"react-\u96c6\u6210",level:2},{value:"\u5b89\u88c5\u548c\u5bfc\u5165",id:"\u5b89\u88c5\u548c\u5bfc\u5165",level:3},{value:"useHookFetch Hook",id:"usehookfetch-hook",level:3},{value:"\u57fa\u7840\u7528\u6cd5",id:"\u57fa\u7840\u7528\u6cd5",level:3},{value:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6",id:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6",level:3},{value:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6",id:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6",level:3},{value:"\u6587\u4ef6\u4e0a\u4f20\u7ec4\u4ef6",id:"\u6587\u4ef6\u4e0a\u4f20\u7ec4\u4ef6",level:3},{value:"Vue \u96c6\u6210",id:"vue-\u96c6\u6210",level:2},{value:"\u5b89\u88c5\u548c\u5bfc\u5165",id:"\u5b89\u88c5\u548c\u5bfc\u5165-1",level:3},{value:"useHookFetch \u7ec4\u5408\u5f0f\u51fd\u6570",id:"usehookfetch-\u7ec4\u5408\u5f0f\u51fd\u6570",level:3},{value:"\u57fa\u7840\u7528\u6cd5",id:"\u57fa\u7840\u7528\u6cd5-1",level:3},{value:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6",id:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6-1",level:3},{value:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6",id:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6-1",level:3},{value:"\u901a\u7528\u96c6\u6210\u6a21\u5f0f",id:"\u901a\u7528\u96c6\u6210\u6a21\u5f0f",level:2},{value:"\u81ea\u5b9a\u4e49 Hook \u5c01\u88c5",id:"\u81ea\u5b9a\u4e49-hook-\u5c01\u88c5",level:3},{value:"\u72b6\u6001\u7ba1\u7406\u96c6\u6210",id:"\u72b6\u6001\u7ba1\u7406\u96c6\u6210",level:3},{value:"\u9519\u8bef\u8fb9\u754c\u96c6\u6210",id:"\u9519\u8bef\u8fb9\u754c\u96c6\u6210",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u6846\u67b6\u96c6\u6210",children:"\u6846\u67b6\u96c6\u6210"})}),"\n",(0,t.jsx)(e.p,{children:"Hook-Fetch \u4e3a\u4e3b\u6d41\u524d\u7aef\u6846\u67b6\u63d0\u4f9b\u4e86\u4e13\u95e8\u7684\u96c6\u6210\u652f\u6301\uff0c\u8ba9\u60a8\u80fd\u591f\u66f4\u597d\u5730\u5728 React\u3001Vue \u7b49\u6846\u67b6\u4e2d\u4f7f\u7528\u6d41\u5f0f\u6570\u636e\u5904\u7406\u548c\u8bf7\u6c42\u7ba1\u7406\u529f\u80fd\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"react-\u96c6\u6210",children:"React \u96c6\u6210"}),"\n",(0,t.jsx)(e.h3,{id:"\u5b89\u88c5\u548c\u5bfc\u5165",children:"\u5b89\u88c5\u548c\u5bfc\u5165"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { useHookFetch } from 'hook-fetch/react';\nimport hookFetch from 'hook-fetch';\n"})}),"\n",(0,t.jsx)(e.h3,{id:"usehookfetch-hook",children:"useHookFetch Hook"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"useHookFetch"})," \u662f\u4e13\u4e3a React \u8bbe\u8ba1\u7684 Hook\uff0c\u63d0\u4f9b\u4e86\u72b6\u6001\u7ba1\u7406\u3001\u9519\u8bef\u5904\u7406\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"interface UseHookFetchOptions<Q> {\n  request: Q;                    // \u8bf7\u6c42\u51fd\u6570\n  onError?: (error: Error) => void; // \u9519\u8bef\u5904\u7406\u56de\u8c03\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u57fa\u7840\u7528\u6cd5",children:"\u57fa\u7840\u7528\u6cd5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import React from 'react';\nimport { useHookFetch } from 'hook-fetch/react';\nimport hookFetch from 'hook-fetch';\n\nconst api = hookFetch.create({\n  baseURL: 'https://api.example.com'\n});\n\nfunction UserProfile({ userId }: { userId: string }) {\n  const {\n    request,\n    loading,\n    cancel,\n    text,\n    stream\n  } = useHookFetch({\n    request: (id: string) => api.get(`/users/${id}`),\n    onError: (error) => console.error('Request failed:', error)\n  });\n\n  const [userData, setUserData] = React.useState(null);\n\n  const loadUser = async () => {\n    try {\n      const data = await request(userId).json();\n      setUserData(data);\n    } catch (error) {\n      console.error('Failed to load user:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={loadUser} disabled={loading}>\n        {loading ? 'Loading...' : 'Load User'}\n      </button>\n      <button onClick={cancel}>Cancel</button>\n      {userData && <div>{JSON.stringify(userData)}</div>}\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6",children:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import React, { useState, useEffect } from 'react';\nimport { useHookFetch } from 'hook-fetch/react';\nimport { sseTextDecoderPlugin } from 'hook-fetch/plugins/sse';\n\nconst chatApi = hookFetch.create({\n  baseURL: 'https://api.openai.com/v1',\n  headers: {\n    'Authorization': 'Bearer your-api-key',\n    'Content-Type': 'application/json'\n  },\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: 'data: ',\n      doneSymbol: '[DONE]'\n    })\n  ]\n});\n\nfunction StreamingChat() {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [input, setInput] = useState('');\n\n  const { stream, loading, cancel } = useHookFetch({\n    request: (message: string) => chatApi.post('/chat/completions', {\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: message }],\n      stream: true\n    }),\n    onError: (error) => {\n      console.error('Chat error:', error);\n      setCurrentMessage('Error: Failed to get response');\n    }\n  });\n\n  const sendMessage = async () => {\n    if (!input.trim() || loading) return;\n\n    const userMessage = input;\n    setInput('');\n    setMessages(prev => [...prev, `User: ${userMessage}`]);\n    setCurrentMessage('');\n\n    try {\n      for await (const chunk of stream(userMessage)) {\n        const delta = chunk.result?.choices?.[0]?.delta?.content;\n        if (delta) {\n          setCurrentMessage(prev => prev + delta);\n        }\n      }\n\n      // \u6d41\u5f0f\u5b8c\u6210\u540e\uff0c\u5c06\u6d88\u606f\u6dfb\u52a0\u5230\u5386\u53f2\n      setMessages(prev => [...prev, `AI: ${currentMessage}`]);\n      setCurrentMessage('');\n    } catch (error) {\n      console.error('Streaming error:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className=\"message\">{msg}</div>\n        ))}\n        {currentMessage && (\n          <div className=\"message streaming\">\n            AI: {currentMessage}\n            <span className=\"cursor\">|</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n          placeholder=\"Type your message...\"\n          disabled={loading}\n        />\n        <button onClick={sendMessage} disabled={loading || !input.trim()}>\n          {loading ? 'Sending...' : 'Send'}\n        </button>\n        {loading && <button onClick={cancel}>Cancel</button>}\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6",children:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import React, { useState, useEffect } from \'react\';\nimport { useHookFetch } from \'hook-fetch/react\';\nimport { sseTextDecoderPlugin } from \'hook-fetch/plugins/sse\';\n\nconst monitoringApi = hookFetch.create({\n  baseURL: \'https://api.example.com\',\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: \'data: \'\n    })\n  ]\n});\n\nfunction SystemMonitor() {\n  const [metrics, setMetrics] = useState({\n    cpu: 0,\n    memory: 0,\n    disk: 0\n  });\n  const [isMonitoring, setIsMonitoring] = useState(false);\n\n  const { stream, loading, cancel } = useHookFetch({\n    request: () => monitoringApi.get(\'/monitoring/metrics\'),\n    onError: (error) => {\n      console.error(\'Monitoring error:\', error);\n      setIsMonitoring(false);\n    }\n  });\n\n  const startMonitoring = async () => {\n    setIsMonitoring(true);\n\n    try {\n      for await (const chunk of stream()) {\n        const metric = chunk.result;\n\n        setMetrics(prev => ({\n          ...prev,\n          [metric.type]: metric.value\n        }));\n      }\n    } catch (error) {\n      console.error(\'Stream error:\', error);\n    } finally {\n      setIsMonitoring(false);\n    }\n  };\n\n  const stopMonitoring = () => {\n    cancel();\n    setIsMonitoring(false);\n  };\n\n  return (\n    <div className="monitor-dashboard">\n      <div className="controls">\n        <button\n          onClick={isMonitoring ? stopMonitoring : startMonitoring}\n          disabled={loading}\n        >\n          {isMonitoring ? \'Stop Monitoring\' : \'Start Monitoring\'}\n        </button>\n      </div>\n\n      <div className="metrics">\n        <div className="metric">\n          <h3>CPU Usage</h3>\n          <div className="progress-bar">\n            <div\n              className="progress-fill"\n              style={{ width: `${metrics.cpu}%` }}\n            />\n          </div>\n          <span>{metrics.cpu}%</span>\n        </div>\n\n        <div className="metric">\n          <h3>Memory Usage</h3>\n          <div className="progress-bar">\n            <div\n              className="progress-fill"\n              style={{ width: `${metrics.memory}%` }}\n            />\n          </div>\n          <span>{metrics.memory}%</span>\n        </div>\n\n        <div className="metric">\n          <h3>Disk Usage</h3>\n          <div className="progress-bar">\n            <div\n              className="progress-fill"\n              style={{ width: `${metrics.disk}%` }}\n            />\n          </div>\n          <span>{metrics.disk}%</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u6587\u4ef6\u4e0a\u4f20\u7ec4\u4ef6",children:"\u6587\u4ef6\u4e0a\u4f20\u7ec4\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { useHookFetch } from 'hook-fetch/react';\n\nfunction FileUpload() {\n  const [file, setFile] = useState<File | null>(null);\n  const [progress, setProgress] = useState(0);\n\n  const { request, loading, cancel } = useHookFetch({\n    request: (file: File) => hookFetch('/api/upload', {\n      method: 'POST',\n      data: { file }\n    }),\n    onError: (error) => {\n      console.error('Upload error:', error);\n      setProgress(0);\n    }\n  });\n\n  const uploadFile = async () => {\n    if (!file) return;\n\n    try {\n      // \u6a21\u62df\u8fdb\u5ea6\u66f4\u65b0\n      const progressInterval = setInterval(() => {\n        setProgress(prev => Math.min(prev + 10, 90));\n      }, 100);\n\n      const result = await request(file).json();\n\n      clearInterval(progressInterval);\n      setProgress(100);\n\n      console.log('Upload successful:', result);\n    } catch (error) {\n      console.error('Upload failed:', error);\n      setProgress(0);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <input\n        type=\"file\"\n        onChange={(e) => setFile(e.target.files?.[0] || null)}\n        disabled={loading}\n      />\n\n      <button\n        onClick={uploadFile}\n        disabled={!file || loading}\n      >\n        {loading ? 'Uploading...' : 'Upload'}\n      </button>\n\n      {loading && (\n        <div>\n          <button onClick={cancel}>Cancel</button>\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress-fill\"\n              style={{ width: `${progress}%` }}\n            />\n          </div>\n          <span>{progress}%</span>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"vue-\u96c6\u6210",children:"Vue \u96c6\u6210"}),"\n",(0,t.jsx)(e.h3,{id:"\u5b89\u88c5\u548c\u5bfc\u5165-1",children:"\u5b89\u88c5\u548c\u5bfc\u5165"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { useHookFetch } from 'hook-fetch/vue';\nimport hookFetch from 'hook-fetch';\n"})}),"\n",(0,t.jsx)(e.h3,{id:"usehookfetch-\u7ec4\u5408\u5f0f\u51fd\u6570",children:"useHookFetch \u7ec4\u5408\u5f0f\u51fd\u6570"}),"\n",(0,t.jsxs)(e.p,{children:["Vue \u7248\u672c\u7684 ",(0,t.jsx)(e.code,{children:"useHookFetch"})," \u63d0\u4f9b\u4e86\u54cd\u5e94\u5f0f\u7684\u72b6\u6001\u7ba1\u7406\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"interface UseHookFetchOptions<Q> {\n  request: Q;                    // \u8bf7\u6c42\u51fd\u6570\n  onError?: (error: Error) => void; // \u9519\u8bef\u5904\u7406\u56de\u8c03\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u57fa\u7840\u7528\u6cd5-1",children:"\u57fa\u7840\u7528\u6cd5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div>\n    <button @click=\"loadUser\" :disabled=\"loading\">\n      {{ loading ? 'Loading...' : 'Load User' }}\n    </button>\n    <button @click=\"cancel\">Cancel</button>\n    <div v-if=\"userData\">{{ userData }}</div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { useHookFetch } from 'hook-fetch/vue';\nimport hookFetch from 'hook-fetch';\n\nconst api = hookFetch.create({\n  baseURL: 'https://api.example.com'\n});\n\nconst userData = ref(null);\nconst userId = ref('1');\n\nconst {\n  request,\n  loading,\n  cancel\n} = useHookFetch({\n  request: (id: string) => api.get(`/users/${id}`),\n  onError: (error) => console.error('Request failed:', error)\n});\n\nconst loadUser = async () => {\n  try {\n    const data = await request(userId.value).json();\n    userData.value = data;\n  } catch (error) {\n    console.error('Failed to load user:', error);\n  }\n};\n<\/script>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6-1",children:"\u6d41\u5f0f\u804a\u5929\u7ec4\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div class=\"chat-container\">\n    <div class=\"messages\">\n      <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\">\n        {{ message }}\n      </div>\n      <div v-if=\"currentMessage\" class=\"message streaming\">\n        AI: {{ currentMessage }}\n        <span class=\"cursor\">|</span>\n      </div>\n    </div>\n\n    <div class=\"input-area\">\n      <input\n        v-model=\"input\"\n        @keypress.enter=\"sendMessage\"\n        :disabled=\"loading\"\n        placeholder=\"Type your message...\"\n      />\n      <button @click=\"sendMessage\" :disabled=\"loading || !input.trim()\">\n        {{ loading ? 'Sending...' : 'Send' }}\n      </button>\n      <button v-if=\"loading\" @click=\"cancel\">Cancel</button>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { useHookFetch } from 'hook-fetch/vue';\nimport { sseTextDecoderPlugin } from 'hook-fetch/plugins/sse';\n\nconst chatApi = hookFetch.create({\n  baseURL: 'https://api.openai.com/v1',\n  headers: {\n    'Authorization': 'Bearer your-api-key',\n    'Content-Type': 'application/json'\n  },\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: 'data: ',\n      doneSymbol: '[DONE]'\n    })\n  ]\n});\n\nconst messages = ref<string[]>([]);\nconst currentMessage = ref('');\nconst input = ref('');\n\nconst { stream, loading, cancel } = useHookFetch({\n  request: (message: string) => chatApi.post('/chat/completions', {\n    model: 'gpt-3.5-turbo',\n    messages: [{ role: 'user', content: message }],\n    stream: true\n  }),\n  onError: (error) => {\n    console.error('Chat error:', error);\n    currentMessage.value = 'Error: Failed to get response';\n  }\n});\n\nconst sendMessage = async () => {\n  if (!input.value.trim() || loading.value) return;\n\n  const userMessage = input.value;\n  input.value = '';\n  messages.value.push(`User: ${userMessage}`);\n  currentMessage.value = '';\n\n  try {\n    for await (const chunk of stream(userMessage)) {\n      const delta = chunk.result?.choices?.[0]?.delta?.content;\n      if (delta) {\n        currentMessage.value += delta;\n      }\n    }\n\n    messages.value.push(`AI: ${currentMessage.value}`);\n    currentMessage.value = '';\n  } catch (error) {\n    console.error('Streaming error:', error);\n  }\n};\n<\/script>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6-1",children:"\u5b9e\u65f6\u6570\u636e\u76d1\u63a7\u7ec4\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-vue",children:'<template>\n  <div class="monitor-dashboard">\n    <div class="controls">\n      <button @click="toggleMonitoring" :disabled="loading">\n        {{ isMonitoring ? \'Stop Monitoring\' : \'Start Monitoring\' }}\n      </button>\n    </div>\n\n    <div class="metrics">\n      <div class="metric">\n        <h3>CPU Usage</h3>\n        <div class="progress-bar">\n          <div\n            class="progress-fill"\n            :style="{ width: `${metrics.cpu}%` }"\n          />\n        </div>\n        <span>{{ metrics.cpu }}%</span>\n      </div>\n\n      <div class="metric">\n        <h3>Memory Usage</h3>\n        <div class="progress-bar">\n          <div\n            class="progress-fill"\n            :style="{ width: `${metrics.memory}%` }"\n          />\n        </div>\n        <span>{{ metrics.memory }}%</span>\n      </div>\n\n      <div class="metric">\n        <h3>Disk Usage</h3>\n        <div class="progress-bar">\n          <div\n            class="progress-fill"\n            :style="{ width: `${metrics.disk}%` }"\n          />\n        </div>\n        <span>{{ metrics.disk }}%</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive } from \'vue\';\nimport { useHookFetch } from \'hook-fetch/vue\';\nimport { sseTextDecoderPlugin } from \'hook-fetch/plugins/sse\';\n\nconst monitoringApi = hookFetch.create({\n  baseURL: \'https://api.example.com\',\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: \'data: \'\n    })\n  ]\n});\n\nconst metrics = reactive({\n  cpu: 0,\n  memory: 0,\n  disk: 0\n});\n\nconst isMonitoring = ref(false);\n\nconst { stream, loading, cancel } = useHookFetch({\n  request: () => monitoringApi.get(\'/monitoring/metrics\'),\n  onError: (error) => {\n    console.error(\'Monitoring error:\', error);\n    isMonitoring.value = false;\n  }\n});\n\nconst startMonitoring = async () => {\n  isMonitoring.value = true;\n\n  try {\n    for await (const chunk of stream()) {\n      const metric = chunk.result;\n      metrics[metric.type] = metric.value;\n    }\n  } catch (error) {\n    console.error(\'Stream error:\', error);\n  } finally {\n    isMonitoring.value = false;\n  }\n};\n\nconst stopMonitoring = () => {\n  cancel();\n  isMonitoring.value = false;\n};\n\nconst toggleMonitoring = () => {\n  if (isMonitoring.value) {\n    stopMonitoring();\n  } else {\n    startMonitoring();\n  }\n};\n<\/script>\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u901a\u7528\u96c6\u6210\u6a21\u5f0f",children:"\u901a\u7528\u96c6\u6210\u6a21\u5f0f"}),"\n",(0,t.jsx)(e.h3,{id:"\u81ea\u5b9a\u4e49-hook-\u5c01\u88c5",children:"\u81ea\u5b9a\u4e49 Hook \u5c01\u88c5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// React \u7248\u672c\nimport { useHookFetch } from 'hook-fetch/react';\n\nexport function useApi() {\n  const api = hookFetch.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  const { request, loading, cancel } = useHookFetch({\n    request: api.request,\n    onError: (error) => {\n      // \u5168\u5c40\u9519\u8bef\u5904\u7406\n      console.error('API Error:', error);\n    }\n  });\n\n  return {\n    get: (url: string, params?: any) => request(url, { method: 'GET', params }),\n    post: (url: string, data?: any) => request(url, { method: 'POST', data }),\n    put: (url: string, data?: any) => request(url, { method: 'PUT', data }),\n    delete: (url: string) => request(url, { method: 'DELETE' }),\n    loading,\n    cancel\n  };\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u72b6\u6001\u7ba1\u7406\u96c6\u6210",children:"\u72b6\u6001\u7ba1\u7406\u96c6\u6210"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// \u4e0e Redux \u96c6\u6210\nimport { useDispatch } from 'react-redux';\nimport { useHookFetch } from 'hook-fetch/react';\n\nexport function useApiWithRedux() {\n  const dispatch = useDispatch();\n\n  const { request, loading } = useHookFetch({\n    request: api.request,\n    onError: (error) => {\n      dispatch({ type: 'API_ERROR', payload: error.message });\n    }\n  });\n\n  const fetchUser = async (id: string) => {\n    dispatch({ type: 'FETCH_USER_START' });\n    try {\n      const user = await request(`/users/${id}`).json();\n      dispatch({ type: 'FETCH_USER_SUCCESS', payload: user });\n    } catch (error) {\n      dispatch({ type: 'FETCH_USER_ERROR', payload: error.message });\n    }\n  };\n\n  return { fetchUser, loading };\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u9519\u8bef\u8fb9\u754c\u96c6\u6210",children:"\u9519\u8bef\u8fb9\u754c\u96c6\u6210"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// React \u9519\u8bef\u8fb9\u754c\nimport React from 'react';\n\nclass ApiErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('API Error Boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"error-fallback\">\n          <h2>Something went wrong with the API request.</h2>\n          <details>\n            {this.state.error && this.state.error.toString()}\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u901a\u8fc7\u8fd9\u4e9b\u6846\u67b6\u96c6\u6210\uff0cHook-Fetch \u53ef\u4ee5\u65e0\u7f1d\u5730\u878d\u5165\u60a8\u7684\u73b0\u6709\u9879\u76ee\uff0c\u63d0\u4f9b\u5f3a\u5927\u7684\u6d41\u5f0f\u6570\u636e\u5904\u7406\u80fd\u529b\u548c\u4f18\u96c5\u7684\u72b6\u6001\u7ba1\u7406\u3002"})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>i});var s=r(6540);const t={},o=s.createContext(t);function a(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);