"use strict";(self.webpackChunkhook_fetch_docs=self.webpackChunkhook_fetch_docs||[]).push([[2713],{808:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"reference/faq","title":"Frequently Asked Questions","description":"This page answers common questions about Hook-Fetch usage, configuration, and troubleshooting.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/reference/faq.md","sourceDirName":"reference","slug":"/reference/faq","permalink":"/hook-fetch/en/docs/reference/faq","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Json_Lee","lastUpdatedAt":1751963620000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Chat Application Example","permalink":"/hook-fetch/en/docs/examples/chat-application"}}');var r=o(4848),t=o(8453);const i={sidebar_position:1},a="Frequently Asked Questions",l={},c=[{value:"General Questions",id:"general-questions",level:2},{value:"What is Hook-Fetch?",id:"what-is-hook-fetch",level:3},{value:"How is Hook-Fetch different from Axios?",id:"how-is-hook-fetch-different-from-axios",level:3},{value:"Can I use Hook-Fetch with TypeScript?",id:"can-i-use-hook-fetch-with-typescript",level:3},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"How do I install Hook-Fetch?",id:"how-do-i-install-hook-fetch",level:3},{value:"Do I need any polyfills?",id:"do-i-need-any-polyfills",level:3},{value:"Can I use Hook-Fetch in Node.js?",id:"can-i-use-hook-fetch-in-nodejs",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"How do I make a simple GET request?",id:"how-do-i-make-a-simple-get-request",level:3},{value:"How do I create a configured instance?",id:"how-do-i-create-a-configured-instance",level:3},{value:"How do I handle different response types?",id:"how-do-i-handle-different-response-types",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"How do I handle errors?",id:"how-do-i-handle-errors",level:3},{value:"How do I set up global error handling?",id:"how-do-i-set-up-global-error-handling",level:3},{value:"Streaming and SSE",id:"streaming-and-sse",level:2},{value:"How do I handle Server-Sent Events (SSE)?",id:"how-do-i-handle-server-sent-events-sse",level:3},{value:"How do I process streaming data?",id:"how-do-i-process-streaming-data",level:3},{value:"Can I cancel streaming requests?",id:"can-i-cancel-streaming-requests",level:3},{value:"Plugin System",id:"plugin-system",level:2},{value:"How do I create a custom plugin?",id:"how-do-i-create-a-custom-plugin",level:3},{value:"How do I register multiple plugins?",id:"how-do-i-register-multiple-plugins",level:3},{value:"What&#39;s the plugin execution order?",id:"whats-the-plugin-execution-order",level:3},{value:"Framework Integration",id:"framework-integration",level:2},{value:"How do I use Hook-Fetch with React?",id:"how-do-i-use-hook-fetch-with-react",level:3},{value:"How do I use Hook-Fetch with Vue?",id:"how-do-i-use-hook-fetch-with-vue",level:3},{value:"Performance and Optimization",id:"performance-and-optimization",level:2},{value:"How do I implement request caching?",id:"how-do-i-implement-request-caching",level:3},{value:"How do I implement request deduplication?",id:"how-do-i-implement-request-deduplication",level:3},{value:"How do I optimize for large files?",id:"how-do-i-optimize-for-large-files",level:3},{value:"Debugging and Testing",id:"debugging-and-testing",level:2},{value:"How do I debug requests?",id:"how-do-i-debug-requests",level:3},{value:"How do I mock requests for testing?",id:"how-do-i-mock-requests-for-testing",level:3},{value:"How do I test streaming functionality?",id:"how-do-i-test-streaming-functionality",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"Why am I getting CORS errors?",id:"why-am-i-getting-cors-errors",level:3},{value:"Why are my requests not being sent?",id:"why-are-my-requests-not-being-sent",level:3},{value:"How do I handle timeout errors?",id:"how-do-i-handle-timeout-errors",level:3},{value:"Why is my plugin not working?",id:"why-is-my-plugin-not-working",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"frequently-asked-questions",children:"Frequently Asked Questions"})}),"\n",(0,r.jsx)(n.p,{children:"This page answers common questions about Hook-Fetch usage, configuration, and troubleshooting."}),"\n",(0,r.jsx)(n.h2,{id:"general-questions",children:"General Questions"}),"\n",(0,r.jsx)(n.h3,{id:"what-is-hook-fetch",children:"What is Hook-Fetch?"}),"\n",(0,r.jsx)(n.p,{children:"Hook-Fetch is a modern HTTP request library based on the native fetch API. It provides a clean syntax, rich features, and a powerful plugin system, with particular strength in streaming data processing and framework integration."}),"\n",(0,r.jsx)(n.h3,{id:"how-is-hook-fetch-different-from-axios",children:"How is Hook-Fetch different from Axios?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lighter weight"}),": Based on native fetch API, smaller bundle size"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modern design"}),": Built for modern JavaScript/TypeScript projects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Streaming support"}),": Native support for SSE and streaming data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin system"}),": Powerful and flexible plugin architecture"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Framework integration"}),": Built-in React and Vue hooks"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"can-i-use-hook-fetch-with-typescript",children:"Can I use Hook-Fetch with TypeScript?"}),"\n",(0,r.jsx)(n.p,{children:"Yes! Hook-Fetch is written in TypeScript and provides complete type definitions. You get full type safety and IntelliSense support."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst user = await api.get<User>('/users/1').json();\n// user is fully typed as User\n"})}),"\n",(0,r.jsx)(n.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-install-hook-fetch",children:"How do I install Hook-Fetch?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install hook-fetch\n\n# yarn\nyarn add hook-fetch\n\n# pnpm\npnpm add hook-fetch\n"})}),"\n",(0,r.jsx)(n.h3,{id:"do-i-need-any-polyfills",children:"Do I need any polyfills?"}),"\n",(0,r.jsx)(n.p,{children:"Hook-Fetch uses the native fetch API, which is supported in all modern browsers. For older browsers (IE11), you may need a fetch polyfill."}),"\n",(0,r.jsx)(n.h3,{id:"can-i-use-hook-fetch-in-nodejs",children:"Can I use Hook-Fetch in Node.js?"}),"\n",(0,r.jsxs)(n.p,{children:["Yes, but you'll need to ensure fetch is available. In Node.js 18+, fetch is built-in. For older versions, you can use a polyfill like ",(0,r.jsx)(n.code,{children:"node-fetch"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-make-a-simple-get-request",children:"How do I make a simple GET request?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import hookFetch from 'hook-fetch';\n\n// Simple GET request\nconst response = await hookFetch('https://api.example.com/users').json();\n\n// With parameters\nconst users = await hookFetch('https://api.example.com/users', {\n  params: { page: 1, limit: 10 }\n}).json();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-create-a-configured-instance",children:"How do I create a configured instance?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const api = hookFetch.create({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer your-token'\n  },\n  timeout: 5000\n});\n\nconst users = await api.get('/users').json();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-handle-different-response-types",children:"How do I handle different response types?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// JSON response\nconst jsonData = await request.json();\n\n// Text response\nconst textData = await request.text();\n\n// Blob response (for files)\nconst blobData = await request.blob();\n\n// ArrayBuffer response\nconst arrayBufferData = await request.arrayBuffer();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-handle-errors",children:"How do I handle errors?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"try {\n  const response = await api.get('/users/1').json();\n} catch (error) {\n  if (error.response) {\n    // Server responded with error status\n    console.log('Status:', error.response.status);\n    console.log('Data:', error.response.data);\n  } else if (error.request) {\n    // Request was sent but no response received\n    console.log('Network error');\n  } else {\n    // Other error\n    console.log('Error:', error.message);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-set-up-global-error-handling",children:"How do I set up global error handling?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const errorHandlerPlugin = () => ({\n  name: 'error-handler',\n  async onError(error, config) {\n    console.error(`API Error [${config.method}] ${config.url}:`, error);\n\n    if (error.response?.status === 401) {\n      // Handle unauthorized\n      window.location.href = '/login';\n    }\n\n    return error;\n  }\n});\n\nconst api = hookFetch.create({\n  plugins: [errorHandlerPlugin()]\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"streaming-and-sse",children:"Streaming and SSE"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-handle-server-sent-events-sse",children:"How do I handle Server-Sent Events (SSE)?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { sseTextDecoderPlugin } from 'hook-fetch/plugins/sse';\n\nconst api = hookFetch.create({\n  plugins: [\n    sseTextDecoderPlugin({\n      json: true,\n      prefix: 'data: ',\n      doneSymbol: '[DONE]'\n    })\n  ]\n});\n\nfor await (const chunk of api.get('/sse-endpoint').stream()) {\n  console.log('SSE data:', chunk.result);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-process-streaming-data",children:"How do I process streaming data?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const request = hookFetch('https://api.example.com/stream');\n\nfor await (const chunk of request.stream()) {\n  console.log('Received:', chunk.result);\n  console.log('Raw bytes:', chunk.source);\n\n  if (chunk.error) {\n    console.error('Stream error:', chunk.error);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"can-i-cancel-streaming-requests",children:"Can I cancel streaming requests?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const request = api.get('/stream');\n\n// Cancel after 30 seconds\nsetTimeout(() => {\n  request.abort();\n}, 30000);\n\ntry {\n  for await (const chunk of request.stream()) {\n    console.log(chunk.result);\n  }\n} catch (error) {\n  if (error.name === 'AbortError') {\n    console.log('Stream cancelled');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"plugin-system",children:"Plugin System"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-create-a-custom-plugin",children:"How do I create a custom plugin?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const myPlugin = () => ({\n  name: 'my-plugin',\n  priority: 1,\n  async beforeRequest(config) {\n    // Modify request before sending\n    config.headers.set('X-Custom-Header', 'value');\n    return config;\n  },\n  async afterResponse(context) {\n    // Process response after receiving\n    console.log('Response received:', context.response.status);\n    return context;\n  }\n});\n\napi.use(myPlugin());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-register-multiple-plugins",children:"How do I register multiple plugins?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const api = hookFetch.create({\n  plugins: [\n    authPlugin(),\n    loggerPlugin(),\n    retryPlugin({ maxRetries: 3 })\n  ]\n});\n\n// Or register individually\napi.use(cachePlugin());\napi.use(metricsPlugin());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-plugin-execution-order",children:"What's the plugin execution order?"}),"\n",(0,r.jsx)(n.p,{children:"Plugins execute by priority (lower numbers = higher priority):"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"beforeRequest (by priority)"}),"\n",(0,r.jsx)(n.li,{children:"beforeStream (for streaming requests)"}),"\n",(0,r.jsx)(n.li,{children:"transformStreamChunk (for streaming requests)"}),"\n",(0,r.jsx)(n.li,{children:"afterResponse (by priority)"}),"\n",(0,r.jsx)(n.li,{children:"onError (if error occurs)"}),"\n",(0,r.jsx)(n.li,{children:"onFinally (always)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-use-hook-fetch-with-react",children:"How do I use Hook-Fetch with React?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useHookFetch } from 'hook-fetch/react';\n\nfunction UserComponent() {\n  const { request, loading, cancel } = useHookFetch({\n    request: (id: string) => api.get(`/users/${id}`),\n    onError: (error) => console.error('Request failed:', error)\n  });\n\n  const [userData, setUserData] = useState(null);\n\n  const loadUser = async () => {\n    const data = await request('123').json();\n    setUserData(data);\n  };\n\n  return (\n    <div>\n      <button onClick={loadUser} disabled={loading}>\n        {loading ? 'Loading...' : 'Load User'}\n      </button>\n      {userData && <div>{JSON.stringify(userData)}</div>}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-use-hook-fetch-with-vue",children:"How do I use Hook-Fetch with Vue?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-vue",children:"<template>\n  <div>\n    <button @click=\"loadUser\" :disabled=\"loading\">\n      {{ loading ? 'Loading...' : 'Load User' }}\n    </button>\n    <div v-if=\"userData\">{{ userData }}</div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useHookFetch } from 'hook-fetch/vue';\n\nconst userData = ref(null);\n\nconst { request, loading } = useHookFetch({\n  request: (id) => api.get(`/users/${id}`),\n  onError: (error) => console.error('Request failed:', error)\n});\n\nconst loadUser = async () => {\n  const data = await request('123').json();\n  userData.value = data;\n};\n<\/script>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-and-optimization",children:"Performance and Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-implement-request-caching",children:"How do I implement request caching?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const cachePlugin = (ttl = 5 * 60 * 1000) => {\n  const cache = new Map();\n\n  return {\n    name: 'cache',\n    async beforeRequest(config) {\n      if (config.method === 'GET') {\n        const key = `${config.url}?${JSON.stringify(config.params)}`;\n        const cached = cache.get(key);\n\n        if (cached && Date.now() - cached.timestamp < ttl) {\n          return Promise.resolve(cached.data);\n        }\n      }\n      return config;\n    },\n    async afterResponse(context, config) {\n      if (config.method === 'GET') {\n        const key = `${config.url}?${JSON.stringify(config.params)}`;\n        cache.set(key, {\n          data: context.result,\n          timestamp: Date.now()\n        });\n      }\n      return context;\n    }\n  };\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-implement-request-deduplication",children:"How do I implement request deduplication?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const deduplicationPlugin = () => {\n  const pendingRequests = new Map();\n\n  return {\n    name: 'deduplication',\n    async beforeRequest(config) {\n      if (config.method === 'GET') {\n        const key = `${config.url}?${JSON.stringify(config.params)}`;\n\n        if (pendingRequests.has(key)) {\n          return pendingRequests.get(key);\n        }\n\n        const requestPromise = fetch(config.url, config);\n        pendingRequests.set(key, requestPromise);\n\n        requestPromise.finally(() => {\n          pendingRequests.delete(key);\n        });\n\n        return requestPromise;\n      }\n      return config;\n    }\n  };\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-optimize-for-large-files",children:"How do I optimize for large files?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// For downloads with progress tracking\nasync function downloadWithProgress(url, filename) {\n  const request = hookFetch(url);\n  const response = await request;\n\n  const total = parseInt(response.headers.get('content-length') || '0');\n  let loaded = 0;\n\n  const chunks = [];\n\n  for await (const chunk of request.stream()) {\n    chunks.push(chunk.source);\n    loaded += chunk.source.length;\n\n    const progress = (loaded / total) * 100;\n    updateProgressBar(progress);\n  }\n\n  const blob = new Blob(chunks);\n  // Handle blob...\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"debugging-and-testing",children:"Debugging and Testing"}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-debug-requests",children:"How do I debug requests?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const debugPlugin = () => ({\n  name: 'debug',\n  async beforeRequest(config) {\n    console.log('\ud83d\ude80 Request:', config.method, config.url, config);\n    return config;\n  },\n  async afterResponse(context, config) {\n    console.log('\u2705 Response:', config.method, config.url, context.response.status);\n    return context;\n  },\n  async onError(error, config) {\n    console.error('\u274c Error:', config.method, config.url, error);\n    return error;\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-mock-requests-for-testing",children:"How do I mock requests for testing?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Using Jest\nconst mockApi = {\n  get: jest.fn(),\n  post: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn()\n};\n\njest.mock('hook-fetch', () => ({\n  create: () => mockApi\n}));\n\n// In tests\ntest('should fetch user', async () => {\n  mockApi.get.mockReturnValue({\n    json: jest.fn().mockResolvedValue({ id: 1, name: 'John' })\n  });\n\n  const result = await UserService.getUser('1');\n  expect(result.name).toBe('John');\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-test-streaming-functionality",children:"How do I test streaming functionality?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Mock streaming response\nconst mockStream = async function* () {\n  yield { result: 'chunk1', source: new Uint8Array(), error: null };\n  yield { result: 'chunk2', source: new Uint8Array(), error: null };\n};\n\nmockApi.get.mockReturnValue({\n  stream: jest.fn().mockReturnValue(mockStream())\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.h3,{id:"why-am-i-getting-cors-errors",children:"Why am I getting CORS errors?"}),"\n",(0,r.jsx)(n.p,{children:"CORS errors occur when making requests from a browser to a different domain. This is a browser security feature, not a Hook-Fetch limitation. Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Configure your server to allow CORS"}),"\n",(0,r.jsx)(n.li,{children:"Use a proxy during development"}),"\n",(0,r.jsx)(n.li,{children:"Make requests from the same origin"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"why-are-my-requests-not-being-sent",children:"Why are my requests not being sent?"}),"\n",(0,r.jsx)(n.p,{children:"Common causes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Network connectivity issues"}),"\n",(0,r.jsx)(n.li,{children:"Incorrect URL or base URL"}),"\n",(0,r.jsx)(n.li,{children:"Request is being blocked by ad blockers"}),"\n",(0,r.jsx)(n.li,{children:"Server is not responding"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-handle-timeout-errors",children:"How do I handle timeout errors?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const api = hookFetch.create({\n  timeout: 10000 // 10 seconds\n});\n\n// Or per request\ntry {\n  const response = await api.get('/slow-endpoint', {}, {\n    timeout: 30000 // 30 seconds\n  }).json();\n} catch (error) {\n  if (error.name === 'TimeoutError') {\n    console.log('Request timed out');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-is-my-plugin-not-working",children:"Why is my plugin not working?"}),"\n",(0,r.jsx)(n.p,{children:"Common issues:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Plugin not registered: Make sure to call ",(0,r.jsx)(n.code,{children:"api.use(plugin())"})]}),"\n",(0,r.jsx)(n.li,{children:"Wrong hook name: Check the plugin interface"}),"\n",(0,r.jsx)(n.li,{children:"Plugin priority: Lower numbers have higher priority"}),"\n",(0,r.jsx)(n.li,{children:"Async/await: Make sure to handle promises correctly"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you have other questions not covered here, please check our ",(0,r.jsx)(n.a,{href:"https://github.com/JsonLee12138/hook-fetch/issues",children:"GitHub Issues"})," or create a new issue."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var s=o(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);